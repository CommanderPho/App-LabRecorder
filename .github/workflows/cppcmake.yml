name: C/C++ CI

on:
  push:
    tags:
    - v*.*
  pull_request:
    branches:
    - master
  release:
    types: ['created']

env:
  LSL_RELEASE_URL: 'https://github.com/sccn/liblsl/releases/download/v1.14.0rc1'
  LSL_RELEASE: '1.14.0'

defaults:
  run:
    shell: bash


jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {name: "ubuntu-20.04", os: "ubuntu-20.04", qtver: 5.15.2}
#        - {name: "ubuntu-18.04", os: "ubuntu-18.04", qtver: 5.15.2}  # Awaiting liblsl deploy fix.
        - {name: "ubuntu-16.04", os: "ubuntu-16.04", qtver: 5.12.10}
        - {name: "windows-x64",  os: "windows-latest", qtver: "specified below"}
        - {name: "macOS-latest", os: "macOS-latest", qtver: "not used"}
    steps:
    - uses: actions/checkout@v2
    - name: Install liblsl and Qt (Ubuntu)
      if: startsWith(matrix.config.os, 'ubuntu-')
      run: |
           curl -L ${LSL_RELEASE_URL}/liblsl-${LSL_RELEASE}-$(lsb_release -sc)_amd64.deb -o liblsl.deb
           sudo dpkg -i liblsl.deb
           sudo apt install mesa-common-dev libglu1-mesa-dev
           wget https://code.qt.io/cgit/qbs/qbs.git/plain/scripts/install-qt.sh
           sudo chmod +x install-qt.sh
           sudo ./install-qt.sh --version ${{ matrix.config.qtver }} qtbase icu
           sudo ldconfig /opt/Qt/${{ matrix.config.qtver }}/gcc_64/lib
           # use with -DQt5_DIR=/opt/Qt/${{ matrix.config.qtver }}/gcc_64/lib/cmake/Qt5
           # or -DCMAKE_PREFIX_PATH=/opt/Qt/${{ matrix.config.qtver }}/gcc_64

    - name: Download liblsl (Windows)
      if: matrix.config.os == 'windows-latest'
      run: |
           curl -L ${LSL_RELEASE_URL}/liblsl-${LSL_RELEASE}-Win_amd64.zip -o liblsl.zip
           7z x liblsl.zip -oLSL

    - name: Install liblsl and Qt (macOS)
      if: matrix.config.os == 'macOS-latest'
      run: |
           curl -L ${LSL_RELEASE_URL}/liblsl-${LSL_RELEASE}-OSX_amd64.tar.bz2 -o liblsl.tar.bz2
           mkdir LSL
           tar -xvf liblsl.tar.bz2 -C LSL
           brew install qt

    - name: Install Qt (Windows)
      if: matrix.config.os == 'windows-latest'
      uses: jurplel/install-qt-action@v2
      with:
        version: 5.15.2

    - name: Configure CMake
      run: |
           cmake --version
           if [ "$RUNNER_OS" == "macOS" ]; then
                   export CMAKE_PREFIX_PATH=/usr/local/opt/qt
           elif [ "$RUNNER_OS" == "Linux" ]; then
                   export CMAKE_PREFIX_PATH=/opt/Qt/${{ matrix.config.qtver }}/gcc_64
           fi
           echo $CMAKE_PREFIX_PATH
           cmake -S . -B build \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=${PWD}/install \
                -DCPACK_PACKAGE_DIRECTORY=${PWD}/package \
                -DLSL_INSTALL_ROOT=$PWD/LSL/ \
                -DCPACK_DEBIAN_PACKAGE_SHLIBDEPS=ON \
                -DCPACK_DEBIAN_PACKAGE_DEPENDS=1

    - name: make
      run: cmake --build build --config Release -j --target install

    - name: package
      run: |
           cmake --build build --config Release -j --target package
           cmake -E remove_directory package/_CPack_Packages
      
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: pkg-${{ matrix.config.name }}
        path: package
    - name: upload to release page
      if: github.event_name == 'release'
      env:
        TOKEN: "token ${{ secrets.GITHUB_TOKEN }}"
        UPLOAD_URL: ${{ github.event.release.upload_url }}
      run: |
              UPLOAD_URL=${UPLOAD_URL%\{*} # remove "{name,label}" suffix
              for pkg in package/*.*; do
                NAME=$(basename $pkg)
                MIME=$(file --mime-type $pkg|cut -d ' ' -f2)
                curl -X POST -H "Accept: application/vnd.github.v3+json" -H "Authorization: $TOKEN" -H "Content-Type: $MIME" --data-binary @$pkg $UPLOAD_URL?name=$NAME
              done
